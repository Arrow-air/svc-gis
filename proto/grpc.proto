// Test Documentation
syntax = "proto3";
import "google/protobuf/timestamp.proto";
package grpc;

// Heartbeat
service RpcService {
    // Common Interfaces
    rpc isReady(ReadyRequest) returns (ReadyResponse);
    rpc updateVertiports(updateVertiportsRequest) returns (UpdateResponse);
    rpc updateWaypoints(updateWaypointsRequest) returns (UpdateResponse);
    rpc updateNoFlyZones(UpdateNoFlyZonesRequest) returns (UpdateResponse);
    rpc updateAircraftPosition(UpdateAircraftPositionRequest)
        returns (UpdateResponse);
    rpc bestPath(BestPathRequest) returns (BestPathResponse);
    rpc nearestNeighbors(NearestNeighborRequest) returns (NearestNeighborResponse);
}

// Ready Request object
message ReadyRequest {
    // No arguments
}

// Ready Response object
message ReadyResponse {

    // True if ready
    bool ready = 1;
}

// General update response object
message UpdateResponse {
    // True if updated
    bool updated = 1;
}

// Geospatial Coordinates
message Coordinates {
    // Latitude Coordinate
    double latitude = 1;

    // Longitude Coordinate
    double longitude = 2;
}

// Vertiport Type
message Vertiport {
    // Unique Arrow ID
    string uuid = 1;

    // Vertiport Polygon
    repeated Coordinates vertices = 2;

    // Vertiport Label
    optional string label = 3;
}

// Waypoint Type
message Waypoint {
    // Unique label
    string label = 1;

    // Latitude Coordinate
    Coordinates location = 2;
}

// Aircraft Type
enum AircraftType {
    // Undeclared aircraft type
    UNDECLARED = 0;

    // Fixed Wing Aircraft
    AEROPLANE = 1;

    // Rotary Wing Aircraft
    ROTORCRAFT = 2;

    // Gyroplane
    GYROPLANE = 3;

    // Hybrid Lift
    HYBRIDLIFT = 4;

    // Ornithopter
    ORNITHOPTER = 5;

    // Glider
    GLIDER = 6;

    // Kite
    KITE = 7;

    // Free Balloon
    FREEBALLOON = 8;

    // Captive Balloon
    CAPTIVEBALLOON = 9;

    // Airship
    AIRSHIP = 10;

    // Unpowered aircraft (free fall or parachute)
    UNPOWERED = 11;

    // Rocket
    ROCKET = 12;

    // Tethered Powered Aircraft
    TETHERED = 13;

    // Ground Obstacle
    GROUNDOBSTACLE = 14;

    // Other
    OTHER = 15;
}

// Aircraft Type
message AircraftPosition {
    // Aircraft Identifier
    string identifier = 1;

    // Aircraft Type
    AircraftType aircraft_type = 2;

    // Aircraft Location
    Coordinates location = 3;

    // Aircraft Altitude
    float altitude_meters = 4;

    // Telemetry Self-Report Time
    google.protobuf.Timestamp timestamp_aircraft = 5;

    // Network Timestamp at Receipt
    google.protobuf.Timestamp timestamp_network = 6;

    // network UUID (optional)
    optional string uuid = 7;
}

// Update Vertiports Request object
message updateVertiportsRequest {
    // Nodes to update
    repeated Vertiport vertiports = 1;
}

// Update Waypoints Request object
message updateWaypointsRequest {
    // Nodes to update
    repeated Waypoint waypoints = 1;
}

// Points in space used for routing (waypoints, vertiports, etc.)
message NoFlyZone {
    // Unique label (NOTAM id, etc.)
    string label = 1;

    // Vertices bounding the No-Fly Zone
    // The first vertex should match the end vertex (closed shape)
    repeated Coordinates vertices = 2;

    // Start datetime for this zone
    google.protobuf.Timestamp time_start = 3;

    // End datetime for this zone
    google.protobuf.Timestamp time_end = 4;
}

// Update No Fly Zones Request object
message UpdateNoFlyZonesRequest {
    // Nodes to update
    repeated NoFlyZone zones = 1;
}

// Update Aircraft Request Object
message UpdateAircraftPositionRequest {

    // List of aircraft to update
    repeated AircraftPosition aircraft = 1;
}

// Types of nodes in itinerary
enum NodeType {
    // Vertiport node
    VERTIPORT = 0;

    // Waypoint node
    WAYPOINT = 1;

    // Aircraft node
    AIRCRAFT = 2;
}

// A path between nodes has >= 1 straight segments
message PathSegment {
    // Segment Index
    int32 index = 1;

    // Start Node Type (Waypoint, Aircraft, or Vertiport)
    NodeType start_type = 2;

    // Latitude
    float start_latitude = 3;

    // Longitude
    float start_longitude = 4;

    // End Node Type (Vertiport or Waypoint)
    NodeType end_type = 5;

    // Latitude
    float end_latitude = 6;

    // Longitude
    float end_longitude = 7;

    // Distance
    float distance_meters = 8;

    // Altitude
    float altitude_meters = 9;
}

// Best Path Request object
message BestPathRequest {
    // Start Node - UUID for Vertiports, identifiers for Aircraft
    string node_start_id = 1;

    // End Node (Vertiport UUID)
    string node_uuid_end = 2;

    // Start Node Type (Vertiport or Aircraft Allowed)
    NodeType start_type = 3;

    // Time of departure
    google.protobuf.Timestamp time_start = 4;

    // Time of arrival
    google.protobuf.Timestamp time_end = 5;
}

// Best Path Response object
message BestPathResponse {
    // Nodes in the best path
    repeated PathSegment segments = 1;
}

// Nearest Neighbor Request object
message NearestNeighborRequest {
    // Start Node - UUID for Vertiports, identifiers for Aircraft
    string start_node_id = 1;

    // Start Node Type (Vertiport or Aircraft Allowed)
    NodeType start_type = 2;

    // End Node Type (Vertiport or Aircraft Allowed)
    NodeType end_type = 3;

    // Limit to this many results
    int32 limit = 4;

    // Limit to this range
    float max_range_meters = 5;
}

// Distance to a node
message DistanceTo {
    // Vertiport or Aircraft ID
    string label = 1;

    // Vertiport or Aircraft Type
    NodeType target_type = 2;

    // Distance to vertiport
    float distance_meters = 3;
}

// Nearest Vertiports Request object
message NearestNeighborResponse {

    // Distances to nearby objects
    repeated DistanceTo distances = 1;
}
