// Test Documentation
syntax = "proto3";
import "google/protobuf/timestamp.proto";
package grpc;

// Heartbeat
service RpcService {
    // Common Interfaces
    rpc isReady(ReadyRequest) returns (ReadyResponse);
    rpc updateVertiports(updateVertiportsRequest) returns (UpdateResponse);
    rpc updateWaypoints(updateWaypointsRequest) returns (UpdateResponse);
    rpc updateNoFlyZones(UpdateNoFlyZonesRequest) returns (UpdateResponse);
    rpc updateAircraft(UpdateAircraftRequest) returns (UpdateResponse);
    rpc bestPath(BestPathRequest) returns (BestPathResponse);
}

// Ready Request object
message ReadyRequest {
    // No arguments
}

// Ready Response object
message ReadyResponse {

    // True if ready
    bool ready = 1;
}

// General update response object
message UpdateResponse {
    // True if updated
    bool updated = 1;
}

// Geospatial Coordinates
message Coordinates {
    // Latitude Coordinate
    float latitude = 1;

    // Longitude Coordinate
    float longitude = 2;
}

// Vertiport Type
message Vertiport {
    // Unique Arrow ID
    string uuid = 1;

    // Vertiport Polygon
    repeated Coordinates vertices = 2;

    // Vertiport Label
    optional string label = 3;
}

// Waypoint Type
message Waypoint {
    // Unique label
    string label = 1;

    // Latitude Coordinate
    Coordinates location = 2;
}

// Aircraft Type
message Aircraft {

    // Aircraft Callsign
    string callsign = 1;

    // Aircraft Location
    Coordinates location = 2;

    // Aircraft Altitude
    float altitude_meters = 3;

    // Aircraft Heading
    float heading_radians = 4;

    // Aircraft Pitch
    float pitch_radians = 5;

    // Aircraft Speed in Meters/Second
    float velocity_mps = 6;

    // Telemetry Report Time
    google.protobuf.Timestamp time = 7;

    // Aircraft UUID, if available
    optional string uuid = 8;
}

// Update Vertiports Request object
message updateVertiportsRequest {
    // Nodes to update
    repeated Vertiport vertiports = 1;
}

// Update Waypoints Request object
message updateWaypointsRequest {
    // Nodes to update
    repeated Waypoint waypoints = 1;
}

// Points in space used for routing (waypoints, vertiports, etc.)
message NoFlyZone {
    // Unique label (NOTAM id, etc.)
    string label = 1;

    // Vertices bounding the No-Fly Zone
    // The first vertex should match the end vertex (closed shape)
    repeated Coordinates vertices = 2;

    // Start datetime for this zone
    google.protobuf.Timestamp time_start = 3;

    // End datetime for this zone
    google.protobuf.Timestamp time_end = 4;
}

// Update No Fly Zones Request object
message UpdateNoFlyZonesRequest {
    // Nodes to update
    repeated NoFlyZone zones = 1;
}

// Update Aircraft Request Object
message UpdateAircraftRequest {

    // List of aircraft to update
    repeated Aircraft aircraft = 1;
}

// Types of nodes in itinerary
enum NodeType {
    // Vertiport node
    VERTIPORT = 0;

    // Waypoint node
    WAYPOINT = 1;

    // Aircraft node
    AIRCRAFT = 2;
}

// A path between nodes has >= 1 straight segments
message PathSegment {
    // Segment Index
    int32 index = 1;

    // Start Node Type (Waypoint, Aircraft, or Vertiport)
    NodeType start_type = 2;

    // Latitude
    float start_latitude = 3;

    // Longitude
    float start_longitude = 4;

    // End Node Type (Vertiport or Waypoint)
    NodeType end_type = 5;

    // Latitude
    float end_latitude = 6;

    // Longitude
    float end_longitude = 7;

    // Distance
    float distance_meters = 8;

    // Altitude
    float altitude_meters = 9;
}

// Best Path Request object
message BestPathRequest {
    // Start Node (Vertiport or Aircraft)
    string node_uuid_start = 1;

    // End Node (Vertiport)
    string node_uuid_end = 2;

    // Start Node Type (Vertiport or Aircraft Allowed)
    NodeType start_type = 3;

    // Time of departure
    google.protobuf.Timestamp time_start = 4;

    // Time of arrival
    google.protobuf.Timestamp time_end = 5;
}

// Best Path Response object
message BestPathResponse {
    // Nodes in the best path
    repeated PathSegment segments = 1;
}
